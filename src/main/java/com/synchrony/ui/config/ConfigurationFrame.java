/*
 * Created on Thursday, January 06 2011 22:16
 */

/*
 * ConfigurationFrame.java
 *
 * Created on Jan 6, 2011, 7:56:55 PM
 */

package com.synchrony.ui.config;

import com.synchrony.config.Config;
import com.synchrony.config.Config.Watcher;
import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author mbien
 */
public class ConfigurationFrame extends JFrame {
    
    private final Config configOrig;
    private final Config configClone;
    private static final Logger log = Logger.getLogger(ConfigurationFrame.class.getName());

    public ConfigurationFrame(Config config) {
        
        this.configOrig = config;
        this.configClone = config.clone();
        
        initComponents();
        
//        folderTable.setDefaultEditor(Path.class, new DefaultCellEditor(new JTextField()){
//
//            @Override
//            public int getClickCountToStart() {
//                return 2;
//            }
//
//            @Override
//            public Component getComponent() {
//                return super.getComponent();
//            }
//            
//            
//        });
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                try {
                    configOrig.watchers.clear();
                    configOrig.watchers.addAll(configClone.watchers);
                    configOrig.save();
                } catch (IOException ex) {
                    log.log(Level.SEVERE, "can not save configuration", ex);
                }
            }
            
        });
    }

    
    private TableModel createTableModel() {
        
        final List<Watcher> watchers = configClone.watchers;
        
        return new DefaultTableModel(new String [] { "enabled", "name", "path"}, watchers.size()) {
            
            Class[] types = new Class[] { Boolean.class, String.class, String.class };

            @Override
            public Object getValueAt(int row, int col) {
                
                Watcher watcher = watchers.get(row);
                
                switch(col) {
                    case 0: return watcher.enabled;
                    case 1: return watcher.name;
                    case 2: return watcher.path;
                }
                
                return super.getValueAt(row, col);
            }

            @Override
            public void setValueAt(Object value, int row, int col) {
                                
                Watcher watcher = watchers.get(row);
                
                switch(col) {
                    case 0: watcher.enabled = (boolean) value; break;
                    case 1: watcher.name = (String) value; break;
                    case 2: watcher.path = (String) value; break;
                }
                
                super.setValueAt(value, row, col);
            }
            
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        JTabbedPane tabbedPane = new JTabbedPane();
        JPanel statusPanel = new JPanel();
        JLabel jLabel1 = new JLabel();
        JPanel foldersPanel = new JPanel();
        JScrollPane scrollPane = new JScrollPane();
        folderTable = new JTable();
        removeButton = new JButton();
        addButton = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Synchrony Configuration");

        jLabel1.setText("online");

        GroupLayout statusPanelLayout = new GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(265, Short.MAX_VALUE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(228, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Status", statusPanel);

        folderTable.setModel(createTableModel());
        scrollPane.setViewportView(folderTable);

        removeButton.setText("remove");

        addButton.setText("add");

        GroupLayout foldersPanelLayout = new GroupLayout(foldersPanel);
        foldersPanel.setLayout(foldersPanelLayout);
        foldersPanelLayout.setHorizontalGroup(
            foldersPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, foldersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(foldersPanelLayout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(scrollPane, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                    .addGroup(foldersPanelLayout.createSequentialGroup()
                        .addComponent(removeButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(addButton)))
                .addContainerGap())
        );

        foldersPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {addButton, removeButton});

        foldersPanelLayout.setVerticalGroup(
            foldersPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, foldersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(foldersPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addContainerGap())
        );

        tabbedPane.addTab("Folders", foldersPanel);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(tabbedPane, GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(tabbedPane, GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    JButton addButton;
    JTable folderTable;
    JButton removeButton;
    // End of variables declaration//GEN-END:variables

}
